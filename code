// Motor Driver (L298N) Pins
#define ENA 5  // Speed control for left motor
#define ENB 10 // Speed control for right motor
#define IN1 9  // Left motor forward
#define IN2 8  // Left motor backward
#define IN3 7  // Right motor forward
#define IN4 6  // Right motor backward

// IR Sensor Pins (for line following)
#define LEFT_IR A0
#define MIDDLE_IR A1
#define RIGHT_IR A2

// LDR Sensor Pins (light detection)
#define LDR_LEFT A3  // Left-side LDR
#define LDR_RIGHT A4 // Right-side LDR

// LED Pins
#define RED_LED 11   // LED for right motor speed increase
#define GREEN_LED 12 // LED for left motor speed increase

// Light Thresholds
#define DARK_THRESHOLD 300   // Below this → Dark
#define BRIGHT_THRESHOLD 1000 // Above this → Bright

void setup() {
  // Set motor control pins as OUTPUT
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  // Set LED pins as OUTPUT
  pinMode(RED_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);

  // Set IR sensor pins as INPUT
  pinMode(LEFT_IR, INPUT);
  pinMode(MIDDLE_IR, INPUT);
  pinMode(RIGHT_IR, INPUT);

  Serial.begin(9600); // Start Serial Monitor
}

void loop() {
  // Read IR sensor values
  int leftSensor = digitalRead(LEFT_IR);
  int middleSensor = digitalRead(MIDDLE_IR);
  int rightSensor = digitalRead(RIGHT_IR);

  // Read LDR values
  int ldrLeft = analogRead(LDR_LEFT);
  int ldrRight = analogRead(LDR_RIGHT);

  // Map LDR values to motor speeds
  int leftMotorSpeed = map(ldrLeft, 0, 1023, 50, 255);
  int rightMotorSpeed = map(ldrRight, 0, 1023, 50, 255);

  // Debugging - Print sensor values and motor speed
  Serial.print("LDR Left: "); Serial.print(ldrLeft);
  Serial.print(" | LDR Right: "); Serial.print(ldrRight);
  Serial.print(" | Motor Left Speed: "); Serial.print(leftMotorSpeed);
  Serial.print(" | Motor Right Speed: "); Serial.println(rightMotorSpeed);

  // LED Control Based on Motor Speed Increase
  if (leftMotorSpeed > rightMotorSpeed) {
    digitalWrite(GREEN_LED, HIGH); // Left motor is faster → Green LED ON
    digitalWrite(RED_LED, LOW);
  } else if (rightMotorSpeed > leftMotorSpeed) {
    digitalWrite(RED_LED, HIGH);   // Right motor is faster → Red LED ON
    digitalWrite(GREEN_LED, LOW);
  } else {
    digitalWrite(RED_LED, HIGH);   // Both motors equal → Both LEDs ON
    digitalWrite(GREEN_LED, HIGH);
  }

  // Line Following Logic
  if (middleSensor == 0) {
    moveForward(leftMotorSpeed, rightMotorSpeed);  // Follow the line
  } else if (leftSensor == 0) {
    turnLeft();     // Correct left
  } else if (rightSensor == 0) {
    turnRight();    // Correct right
  } else {
    stopMotors();   // Stop when no line detected
  }

  delay(100);
}

// Function to move forward with LDR-based speed control
void moveForward(int leftSpeed, int rightSpeed) {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, leftSpeed);  // Adjust left motor speed
  analogWrite(ENB, rightSpeed); // Adjust right motor speed
}

// Function to turn left
void turnLeft() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, 100); // Reduce left motor speed
  analogWrite(ENB, 150);
}

// Function to turn right
void turnRight() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  analogWrite(ENA, 150);
  analogWrite(ENB, 100); // Reduce right motor speed
}

// Function to stop motors
void stopMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}
